[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'sjl/badwolf'
hook_add = '''
  augroup MyVimrc
    autocmd VimEnter * nested colorscheme badwolf
  augroup END
'''

[[plugins]]
repo = 'miyakogi/seiya.vim'
hook_add = '''
  let g:seiya_auto_enable=1
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  augroup MyVimrc
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  augroup END
  let g:WebDevIconsUnicodeDecorateFolderNodes=1
  let g:DevIconsEnableFoldersOpenClose=1
  noremap <C-n> :NERDTreeToggle<LF>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = { 'colorscheme' : 'badwolf' }
  let g:lightline.active = {
    \   'left': [ ['mode', 'paste'],
    \             ['fugitive', 'readonly', 'filename', 'modified'] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent', 'ale' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ }
  let g:lightline.tabline = {
    \ 'left': [ [ 'tabs' ] ]
    \ }

  let g:lightline.component_function = {
    \   'modified': 'LightLineModified',
    \   'readonly': 'LightLineReadonly',
    \   'fugitive': 'LightLineFugitive',
    \   'filename': 'LightLineFilename',
    \   'fileformat': 'LightLineFileformat',
    \   'filetype': 'LightLineFiletype',
    \   'fileencoding': 'LightLineFileencoding',
    \   'mode': 'LightLineMode',
    \   'ale': 'LightLineAle'
    \ }

  let g:lightline.separator = {
    \   'left': "", 'right': ""
    \ }

  let g:lightline.subseparator = {
    \ 'left': "", 'right': ''
    \ }

  function! LightLineModified()
    return &ft =~ 'help\|nerdtree' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|nerdtree' && &readonly ? ' ' : ''
  endfunction

  function! LightLineFilename()
    return (&ft == 'denite' ? denite#get_status_sources() : (&ft == 'nerdtree' ? expand('%:~:h') : '' != expand('%:t') ? expand('%:~:.:h') . '/'. expand('%:t') : '[No Name]'))
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . WebDevIconsGetFileTypeSymbol()[0:2] : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! LightLineFileencoding()
    return  &ft == 'nerdtree' ? '' : winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return  &ft == 'denite' ? 'Denite' : &ft == 'nerdtree' ? 'NERDTree' : winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  augroup MyVimrc
    autocmd User ALELint call lightline#update()
  augroup END

  function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
  endfunction

  function! LightLineAle()
    return &ft == 'denite' ? '' : &ft == 'nerdtree' ? '' : LinterStatus()
  endfunction

  function! LightLineFugitive()
    try
      if &ft !~? 'vimfiler\|gundo\|vaffle' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? ' '._ : ''
      endif
    catch
    endtry
    return ''
  endfunction
'''

[[plugins]]
repo = '844196/lightline-badwolf.vim'


# Syntax Highlight
[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_new_list_item_indent = 2
'''

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
  let g:vue_pre_processors = []
'''

[[plugins]]
repo = 'tomlion/vim-solidity'


[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
let g:copilot_no_tab_map=1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_solidity_solc_options='--import-path=node_modules/'
  let g:ale_fixers={
    \ '*': [ 'remove_trailing_lines', 'trim_whitespace' ],
    \ 'diff': [ ],
    \ 'go': [ 'gofmt', 'remove_trailing_lines', 'trim_whitespace' ],
    \ 'javascript': [ 'eslint', 'prettier', 'remove_trailing_lines', 'trim_whitespace' ],
    \ 'typescript': [ 'eslint', 'prettier', 'remove_trailing_lines', 'trim_whitespace' ],
    \ 'vue': [ 'eslint', 'prettier', 'remove_trailing_lines', 'trim_whitespace' ]
    \ }
  let g:ale_fix_on_save=1
  let g:ale_disable_lsp=1
  noremap <C-x> :ALEFix<LF>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
marged = 0
rev = 'release'
hook_add = '''
  " Use <Tab> for trigger completion with characters ahead and navigate
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config
  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
  inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : exists('b:_copilot.suggestions') ? copilot#Accept() : CheckBackspace() ? "\<Tab>" : coc#refresh()
  inoremap <silent><expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

  nmap <silent> rn <Plug>(coc-rename)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  let g:coc_global_extensions = [
  \ 'coc-clangd',
  \ 'coc-go',
  \ 'coc-tsserver',
  \ 'coc-vetur',
  \ 'coc-pyright',
  \ 'coc-solidity' ]
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
